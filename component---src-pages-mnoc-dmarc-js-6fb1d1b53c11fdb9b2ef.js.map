{"version":3,"file":"component---src-pages-mnoc-dmarc-js-6fb1d1b53c11fdb9b2ef.js","mappings":"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","sources":["webpack://netminded-website/./src/pages/mnoc-dmarc.js"],"sourcesContent":["import * as React from 'react'\nimport Layout from '../components/layout'\nimport { useState } from 'react'\nimport { Waypoint } from 'react-waypoint'\nimport { isEmpty, charactersOnly, validEmailFormat, ValidDomainFormat } from '../utils/utils'\nimport axios from 'axios'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport {\n  faEnvelopeCircleCheck,\n  faSliders,\n  faCode\n} from '@fortawesome/free-solid-svg-icons'\nimport SEO from '../components/seo'\n\nconst sendForm = (e, formData, setFormData, setFormErrors, setFormStatus) => {\n    e.preventDefault()\n\n    if(validateForm(formData, setFormErrors)) {\n        axios\n            .post(`https://formspree.io/f/${process.env.GATSBY_FORMSPREE_ID_MNOC_DMARC}`, formData, {\n                headers: {\n                    Accept: \"application/json\",\n                }\n            })\n            .then(({data}) => {\n                console.log(data)\n                if(data.ok) {\n                    setFormStatus({\n                        statusMessage: formFeedback[7],\n                        statusState: 'good',\n                    })\n                    setFormData({\n                        name: '',\n                        email: '',\n                        subject: 'NetMinded: M-NOC DMARC Interest Registered',\n                        domain: '',\n                        _gotcha: ''\n                    })\n                } else {\n                    if (Object.hasOwn(data, 'errors')) {\n                        setFormStatus({\n                            statusMessage: data[\"errors\"].map(error => error[\"message\"]).join(\", \"),\n                            statusState: 'bad',\n                        })\n                    } else {\n                        setFormStatus({\n                            statusMessage: formFeedback[6],\n                            statusState: 'bad',\n                        })\n                    }\n                }\n                setTimeout(() => setFormStatus({\n                    statusMessage: '',\n                    statusState: 'default',\n                }) , 8000)\n            })\n            .catch((error) => {\n                setFormStatus({\n                    statusMessage: formFeedback[6],\n                    statusState: 'bad',\n                })\n                setTimeout(() => setFormStatus({\n                    statusMessage: '',\n                    statusState: 'default',\n                }) , 8000)\n            })\n    }\n}\n\nconst validateForm = (formData, setFormErrors) => {\n    let formPass = true\n    let errorName = '', errorEmail = '', errorDomain = ''\n\n    if(isEmpty(formData.name)) {\n        formPass = false\n        errorName = formFeedback[0]\n    } else {\n        if(!charactersOnly(formData.name)) {\n            formPass = false\n            errorName = formFeedback[1]\n        }\n    }\n\n    if(isEmpty(formData.email)) {\n        formPass = false\n        errorEmail = formFeedback[2]\n    } else {\n        if(!validEmailFormat(formData.email)) {\n            formPass = false\n            errorEmail = formFeedback[3]\n        }\n    }\n\n    if(isEmpty(formData.domain)) {\n        formPass = false\n        errorDomain = formFeedback[4]\n    } else {\n        if(!ValidDomainFormat(formData.domain)) {\n            formPass = false\n            errorDomain = formFeedback[5]\n        }\n    }\n\n    if(!isEmpty(formData._gotcha)) {\n        formPass = false;\n    }\n\n    setFormErrors({\n        nameError: errorName,\n        emailError: errorEmail,\n        domainError: errorDomain\n    })\n\n    return formPass\n}\n\nconst formFeedback = [\n    'Please enter your name.',\n    'Please enter valid characters for your name.',\n    'Please enter your email address.',\n    'Please enter a valid email address.',\n    'Please enter your website domain.',\n    'Please enter a valid website domain.',\n    'Sorry, there was an issue sending your registration. Please try again later!',\n    'Thank you for registering your interest, we\\'ll be in touch soon!'\n]\n\nconst MnocDmarc = () => {\nconst [isHero, setIsHero] = useState(true)\nconst [formData, setFormData] = React.useState({\n    name: '',\n    email: '',\n    subject: 'NetMinded: M-NOC DMARC Interest Registered',\n    domain: '',\n    _gotcha: ''\n})\nconst [formErrors, setFormErrors] = React.useState({\n    nameError: '',\n    emailError: '',\n    domainError: ''\n})\nconst [formStatus, setFormStatus] = React.useState({\n    statusMessage: '',\n    statusState: 'default',\n})\nreturn (\n    <Layout isHero={isHero} simpleNav={true}>\n            <Waypoint onEnter={() => setIsHero(true)} onLeave={() => setIsHero(false)} topOffset={100}>\n                <div id=\"mnocDmarc\" className=\"hero-container landing-page\">\n                    <div className=\"hero-container-sub\">\n                        <div className=\"container\">\n                            <div className=\"row d-flex align-items-center\">\n                                <div className=\"col-lg-6\">\n                                    <div className=\"hero-content\">\n                                        <h1>Be the first to get our M-NOC DMARC alerts</h1>\n                                        <p>Due to positive feedback, we are launching our no-code function for DMARC reporting. Get alerts about email delivery issues directly into your network or IT monitoring solution.</p>\n                                        <h2>Never miss an email delivery issue again</h2>\n                                        <div className=\"benefit-items\">\n                                            <h3><span className=\"benefit-icon\"><FontAwesomeIcon icon={faEnvelopeCircleCheck}/></span><span className=\"rf-item-text\">We check your DMARC emails and turn them into Red, Amber or Green status messages</span></h3>\n                                            <h3><span className=\"benefit-icon benefit-icon--middle\"><FontAwesomeIcon icon={faSliders}/></span><span className=\"rf-item-text\">You configure a monitor on your I.T. monitoring solution</span></h3>\n                                            <h3><span className=\"benefit-icon\"><FontAwesomeIcon icon={faCode}/></span><span className=\"rf-item-text\">No coding or API skills required</span></h3>\n                                        </div>\n                                    </div>\n                                </div>\n                                <div className='offset-lg-1 col-lg-5'>\n                                    <div className='contact-container'>\n                                        <h2>Sign up to DMARC alerts and be the first to know about upcoming micro-MNOC features for your I.T. monitoring</h2>\n                                        <form>\n                                            <div>\n                                                <label htmlFor=\"formName\" className=\"form-label\">Name</label>\n                                                <input placeholder=\"d'Artagnan\" type=\"text\" name=\"name\" className=\"form-control\" id=\"formName\" value={formData.name} onChange={(e) => {setFormData({...formData, name: e.target.value}); setFormErrors({...formErrors, nameError: ''})}} required />\n                                                {formErrors.nameError.length > 0 && <p className='form-error-text'>{formErrors.nameError}</p>}\n                                            </div>\n                                            <div className=\"mt-5\">\n                                                <label htmlFor=\"formEmail\" className=\"form-label\">Email Address</label>\n                                                <input placeholder=\"d.artagnan@musketeer.com\" type=\"email\" name=\"email\" className=\"form-control\" id=\"formEmail\" value={formData.email} onChange={(e) => {setFormData({...formData, email: e.target.value}); setFormErrors({...formErrors, emailError: ''})}} required />\n                                                {formErrors.emailError.length > 0 && <p className='form-error-text'>{formErrors.emailError}</p>}\n                                            </div>\n                                            <div>\n                                                <input type=\"text\" name=\"subject\" className=\"form-control\" id=\"formSubject\" value={formData.subject} required disabled/>\n                                            </div>\n                                            <div className=\"mt-5\">\n                                                <label htmlFor=\"formDomain\" className=\"form-label\">Website Address</label>\n                                                <input placeholder=\"musketeer.com\" type=\"text\" name=\"domain\" className=\"form-control\" id=\"formDomain\" value={formData.domain} onChange={(e) => {setFormData({...formData, domain: e.target.value}); setFormErrors({...formErrors, domainError: ''})}} required />\n                                                {formErrors.domainError.length > 0 && <p className='form-error-text'>{formErrors.domainError}</p>}\n                                            </div>\n                                            <div>\n                                                <input type=\"text\" name=\"_gotcha\" className=\"form-control\" id=\"formContact\" value={formData._gotcha} onChange={(e) => setFormData({...formData, _gotcha: e.target.value})} />\n                                            </div>\n                                            <div className=\"mt-5\">\n                                                <button className='btn' formNoValidate onClick={(e) => sendForm(e, formData, setFormData, setFormErrors, setFormStatus)}>\n                                                    Register Interest\n                                                </button>\n                                                {formStatus.statusMessage.length > 0 && <p className=\"text-center form-status\">{formStatus.statusMessage}</p>}\n                                            </div>\n                                                \n                                        </form>\n                                    </div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </ Waypoint>\n    </Layout>\n  )\n}\n\nexport default MnocDmarc\n\nexport const Head = () => (\n    <SEO title=\"M-NOC DMARC\" description=\"Be the first to get our M-NOC DMARC alerts — Due to positive feedback, we are launching our no-code function for DMARC reporting.\" article={false} />\n)"],"names":["validateForm","formData","setFormErrors","formPass","errorName","errorEmail","errorDomain","isEmpty","name","formFeedback","charactersOnly","email","validEmailFormat","domain","ValidDomainFormat","_gotcha","nameError","emailError","domainError","useState","isHero","setIsHero","React","subject","setFormData","formErrors","statusMessage","statusState","formStatus","setFormStatus","simpleNav","onEnter","onLeave","topOffset","id","className","icon","faEnvelopeCircleCheck","faSliders","faCode","htmlFor","placeholder","type","value","onChange","e","target","required","length","disabled","formNoValidate","onClick","preventDefault","axios","process","GATSBY_FORMSPREE_ID_MNOC_DMARC","headers","Accept","then","data","console","log","ok","Object","hasOwn","map","error","join","setTimeout","catch","sendForm","Head","title","description","article"],"sourceRoot":""}