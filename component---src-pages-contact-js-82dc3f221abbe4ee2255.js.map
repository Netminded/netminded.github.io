{"version":3,"file":"component---src-pages-contact-js-82dc3f221abbe4ee2255.js","mappings":"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","sources":["webpack://netminded-website/./src/pages/contact.js"],"sourcesContent":["import * as React from 'react'\nimport Layout from '../components/layout'\nimport SEO from '../components/seo'\nimport { Waypoint } from 'react-waypoint'\nimport { isEmpty, charactersOnly, validEmailFormat } from '../utils/utils'\nimport axios from 'axios'\n\nconst sendForm = (e, formData, setFormData, setFormErrors, setFormStatus) => {\n    e.preventDefault()\n\n    if(validateForm(formData, setFormErrors)) {\n        axios\n            .post(`https://formspree.io/f/${process.env.GATSBY_FORMSPREE_ID}`, formData, {\n                headers: {\n                    Accept: \"application/json\",\n                }\n            })\n            .then(({data}) => {\n                console.log(data)\n                if(data.ok) {\n                    setFormStatus({\n                        statusMessage: formFeedback[6],\n                        statusState: 'good',\n                    })\n                    setFormData({\n                        name: '',\n                        email: '',\n                        subject: 'NetMinded Contact Message',\n                        message: '',\n                        _gotcha: ''\n                    })\n                    setTimeout(() => setFormStatus({\n                        statusMessage: '',\n                        statusState: 'default',\n                    }) , 8000)\n                } else {\n                    if (Object.hasOwn(data, 'errors')) {\n                        setFormStatus({\n                            statusMessage: data[\"errors\"].map(error => error[\"message\"]).join(\", \"),\n                            statusState: 'bad',\n                        })\n                        setTimeout(() => setFormStatus({\n                            statusMessage: '',\n                            statusState: 'default',\n                        }) , 8000)\n                    } else {\n                        setFormStatus({\n                            statusMessage: formFeedback[5],\n                            statusState: 'bad',\n                        })\n                        setTimeout(() => setFormStatus({\n                            statusMessage: '',\n                            statusState: 'default',\n                        }) , 8000)\n                    }\n                }\n            })\n            .catch((error) => {\n                setFormStatus({\n                    statusMessage: formFeedback[5],\n                    statusState: 'bad',\n                })\n                setTimeout(() => setFormStatus({\n                    statusMessage: '',\n                    statusState: 'default',\n                }) , 8000)\n            })\n    }\n}\n\nconst validateForm = (formData, setFormErrors) => {\n    let formPass = true\n    let errorName = '', errorEmail = '', errorMsg = ''\n\n    if(isEmpty(formData.name)) {\n        formPass = false\n        errorName = formFeedback[0]\n    } else {\n        if(!charactersOnly(formData.name)) {\n            formPass = false\n            errorName = formFeedback[1]\n        }\n    }\n\n    if(isEmpty(formData.email)) {\n        formPass = false\n        errorEmail = formFeedback[2]\n    } else {\n        if(!validEmailFormat(formData.email)) {\n            formPass = false\n            errorEmail = formFeedback[3]\n        }\n    }\n\n    if(isEmpty(formData.message)) {\n        formPass = false;\n        errorMsg = formFeedback[4]\n    }\n\n    if(!isEmpty(formData._gotcha)) {\n        formPass = false;\n    }\n\n    setFormErrors({\n        nameError: errorName,\n        emailError: errorEmail,\n        messageError: errorMsg\n    })\n\n    return formPass\n}\n\nconst formFeedback = [\n    'Please enter your name.',\n    'Please enter valid characters for your name.',\n    'Please enter your email address.',\n    'Please enter a valid email address.',\n    'Please enter a message.',\n    'Sorry, there was an issue sending your form request. Please try again later!',\n    'Thank you for your message, we\\'ll be in touch soon!'\n]\n\nconst ContactPage = () => {\n    const [isHero, setIsHero] = React.useState(false)\n    const [formData, setFormData] = React.useState({\n        name: '',\n        email: '',\n        subject: 'NetMinded Contact Message',\n        message: '',\n        _gotcha: ''\n    })\n    const [formErrors, setFormErrors] = React.useState({\n        nameError: '',\n        emailError: '',\n        messageError: ''\n    })\n    const [formStatus, setFormStatus] = React.useState({\n        statusMessage: '',\n        statusState: 'default',\n    })\n    return (\n        <Layout isHero={isHero}>\n            <Waypoint onEnter={() => setIsHero(true)} onLeave={() => setIsHero(false)} topOffset={100}>\n                <header className=\"contact-page-header\">\n                    <h1>Contact Us</h1>\n                    <h3>Whether you're interested in partnering with us, adopting our eco-system or you just have a general enquiry get in touch!</h3>\n                </header>\n            </Waypoint>\n            <div className='contact-container'>\n                <div className='container'>\n                    <form className='row'>\n                        <div className=\"offset-3 col-6\">\n                            <label for=\"formName\" className=\"form-label\">Name</label>\n                            <input placeholder=\"d'Artagnan\" type=\"text\" name=\"name\" class=\"form-control\" id=\"formName\" value={formData.name} onChange={(e) => {setFormData({...formData, name: e.target.value}); setFormErrors({...formErrors, nameError: ''})}} required />\n                            {formErrors.nameError.length > 0 && <p className='form-error-text'>{formErrors.nameError}</p>}\n                        </div>\n                        <div className=\"offset-3 col-6 mt-5\">\n                            <label for=\"formEmail\" className=\"form-label\">Email Address</label>\n                            <input placeholder=\"d.artagnan@musketeer.com\" type=\"email\" name=\"email\" class=\"form-control\" id=\"formEmail\" value={formData.email} onChange={(e) => {setFormData({...formData, email: e.target.value}); setFormErrors({...formErrors, emailError: ''})}} required />\n                            {formErrors.emailError.length > 0 && <p className='form-error-text'>{formErrors.emailError}</p>}\n                        </div>\n                        <div className=\"offset-3 col-6\">\n                            <input type=\"text\" name=\"subject\" class=\"form-control\" id=\"formSubject\" value={formData.subject} required disabled/>\n                        </div>\n                        <div className=\"offset-3 col-6 mt-5\">\n                            <label for=\"formMessage\" className=\"form-label\">Message</label>\n                            <textarea placeholder=\"All for one and one for all!\" name=\"message\" class=\"form-control\" id=\"formMessage\" value={formData.message} onChange={(e) => {setFormData({...formData, message: e.target.value}); setFormErrors({...formErrors, messageError: ''})}} required />\n                            {formErrors.messageError.length > 0 && <p className='form-error-text'>{formErrors.messageError}</p>}\n                        </div>\n                        <div className='offset-3 col-6'>\n                            <input type=\"text\" name=\"_gotcha\" class=\"form-control\" id=\"formContact\" value={formData._gotcha} onChange={(e) => setFormData({...formData, _gotcha: e.target.value})} />\n                        </div>\n                        <div className='offset-3 col-6 mt-5'>\n                            <button className='btn' formnovalidate onClick={(e) => sendForm(e, formData, setFormData, setFormErrors, setFormStatus)}>\n                                Send Message\n                            </button>\n                            {formStatus.statusMessage.length > 0 && <p className={`text-center form-status ${formStatus.statusState === 'good' ? 'form-status-good' : 'form-status-bad'}`}>{formStatus.statusMessage}</p>}\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </Layout>\n    )\n}\n\nexport default ContactPage\n\nexport const Head = () => (\n    <SEO title=\"Contact Us\" article={false} />\n)"],"names":["validateForm","formData","setFormErrors","formPass","errorName","errorEmail","errorMsg","isEmpty","name","formFeedback","charactersOnly","email","validEmailFormat","message","_gotcha","nameError","emailError","messageError","React","isHero","setIsHero","subject","setFormData","formErrors","statusMessage","statusState","formStatus","setFormStatus","onEnter","onLeave","topOffset","className","for","placeholder","type","class","id","value","onChange","e","target","required","length","disabled","formnovalidate","onClick","preventDefault","axios","headers","Accept","then","data","console","log","ok","setTimeout","Object","hasOwn","map","error","join","catch","sendForm","Head","title","article"],"sourceRoot":""}